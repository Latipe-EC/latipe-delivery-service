// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"delivery-service/config"
	"delivery-service/internal/adapter/userserv"
	"delivery-service/internal/api"
	"delivery-service/internal/domain/repos"
	"delivery-service/internal/middleware"
	"delivery-service/internal/router"
	"delivery-service/internal/service/deliveryserv"
	"delivery-service/internal/service/shippingserv"
	"delivery-service/pkgs/mongodb"
	"delivery-service/pkgs/resty"
	"encoding/json"
	"github.com/ansrivas/fiberprometheus/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"time"
)

// Injectors from server.go:

func New() (*Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	client := restyclient.InitRestyGoClient(configConfig)
	userService := userserv.NewUserService(client, configConfig)
	mongoClient, err := mongodb.OpenMongoDBConnection(configConfig)
	if err != nil {
		return nil, err
	}
	deliveryRepos := repos.NewDeliveryRepos(mongoClient)
	deliveryService := deliveryserv.NewDeliveryService(userService, deliveryRepos)
	deliveryHandle := api.NewDeliveryHandle(deliveryService)
	provinceRepository := repos.InitProvinceRepository(configConfig)
	shippingCostService := shippingserv.NewShippingCostService(provinceRepository, userService, deliveryRepos)
	shippingHandle := api.NewShippingHandle(shippingCostService)
	districtRepos := repos.InitDistrictRepository(configConfig)
	wardRepos := repos.InitWardRepository(configConfig)
	vietNamProvinceHandle := api.NewVietNamProvinceHandle(provinceRepository, districtRepos, wardRepos)
	authMiddleware := middleware.NewAuthMiddleware(userService)
	routerHandler := router.NewRouterHandler(deliveryHandle, shippingHandle, vietNamProvinceHandle, authMiddleware)
	server := NewServer(configConfig, routerHandler)
	return server, nil
}

// server.go:

type Server struct {
	app       *fiber.App
	globalCfg *config.Config
}

func NewServer(
	cfg *config.Config, router2 *router.RouterHandler) *Server {

	app := fiber.New(fiber.Config{
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 5 * time.Second,
		JSONDecoder:  json.Unmarshal,
		JSONEncoder:  json.Marshal,
	})

	prometheus := fiberprometheus.New("latipe-delivery-service")
	prometheus.RegisterAt(app, "/metrics")
	app.Use(prometheus.Middleware)

	app.Use(logger.New())

	app.Get("", func(ctx *fiber.Ctx) error {
		s := struct {
			Message string `json:"message"`
			Version string `json:"version"`
		}{
			Message: "delivery service was developed by TienDat",
			Version: "v1.0.1",
		}
		return ctx.JSON(s)
	})
	api2 := app.Group("/api")
	v1 := api2.Group("/v1")
	router2.
		InitRouter(&v1)

	return &Server{
		globalCfg: cfg,
		app:       app,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.Config {
	return serv.globalCfg
}
